function [score2D, intens_myo, intens_bld, reportImg, reportCine]=findLVctr_cluster(im3d,varargin)
% 
% OPTIONAL INPUT
%     'ClusMskMedFiltWidth': Default 3. Cleaning blood and myocardial masks generated by clustering by median filtering. 
%     'ClusMskTrimSaveFrxn': Default 0.8. Cleaning blood and myocardial masks generated by clustering.
%     'RndMskTrimThreshMax': Default 0.8. Fraction of max roundness value, regions w roundness below it will be deleted.
% OPTIONAL INPUT PASSED ON TO cineClusterBldMyo
%     'motionRegTrimSaveFrxn'
%     'hrtMskDilateR'
% 
% OUTPUT
%     score2D: same size as a frame of input cine. Larger is better.
%     intens_myo,intens_bld: intensity of myo and blood for this cine.

% n1=size(im3d,1);
% n2=size(im3d,2);
% n3=size(im3d,3);
im3d=LG_scale(im3d);

[ClusMskMedFiltWidth,varargin]=findStripArg(varargin,'ClusMskMedFiltWidth',3);
[ClusMskTrimSaveFrxn,varargin]=findStripArg(varargin,'ClusMskTrimSaveFrxn',0.8);
[RndMskTrimThreshMax,varargin]=findStripArg(varargin,'RndMskTrimThreshMax',0.8);
% [priorScore2D,varargin]=findStripArg(varargin,'priorScore2D',0.8);
% [regBldDilateRadius,varargin]=findStripArg(varargin,'regBldDilateRadius',2);


%% separate myocardium, blood:
[msk3d_myo,msk3d_bld, intens_myo,intens_bld, msk3d_hrt,im3d_mopx]=cineClusterBldMyo(im3d,varargin);
% clean up a bit:
msk3d_myo=runFxnOnPage(msk3d_myo,@medfilt2, [ClusMskMedFiltWidth ClusMskMedFiltWidth]); %%%%
msk3d_bld=runFxnOnPage(msk3d_bld,@medfilt2, [ClusMskMedFiltWidth ClusMskMedFiltWidth]); %%%%
msk3d_myo=runFxnOnPage(msk3d_myo,@maskTrimRegions, ClusMskTrimSaveFrxn, 4); %%%%
msk3d_bld=runFxnOnPage(msk3d_bld,@maskTrimRegions, ClusMskTrimSaveFrxn, 4); %%%%

%% blood region roundness 
rMap3d_bld=runFxnOnPage(msk3d_bld,@maskRegRndmap,'convex',true);  %   sum(rMap3d_bld,3); 
rMap3d_bld2=rMap3d_bld; % sum(rMap3d_bld,3); 
rMap3d_bld2(rMap3d_bld2<RndMskTrimThreshMax*max(rMap3d_bld(:)))=0; %%%%   %   sum(rMap3d_bld2,3); 

%% "Round-size" metric: larger is better
% bwdist on inverse blood mask:
bwdist3d=runFxnOnPage(~msk3d_bld,@bwdist);
bwdist3d=LG_scale(bwdist3d);

%% output
score3D=bwdist3d.*rMap3d_bld2;
score2D=LG_scale(mean(score3D,3));

%% output report image, cine
if nargout>3
    
    % Mark 2D roundness map max:
    rMap2d=LG_scale(mean(rMap3d_bld2,3));
    [~,rMap2dmarked]=imgFindMaxRegCtr(rMap2d,0.9); %%%%
%     rMap2d(c1c2(1),:)=1;
%     rMap2d(:,c1c2(2))=1;
    
    % Mark max of final score
    [~,score2Dmarked]=imgFindMaxRegCtr(score2D,0.9); %%%%
%     score2Dmarked=score2D;
%     c1c2=matrixFindMaxRegCtr(score2Dmarked,0.9); %%%%
%     score2Dmarked(c1c2(1),:)=1;
%     score2Dmarked(:,c1c2(2))=1;
    
    reportImg=[im3d(:,:,1),im3d_mopx(:,:,1),msk3d_myo(:,:,1);msk3d_bld(:,:,1),rMap2dmarked,score2Dmarked];

end

if nargout>4
    reportCine=[im3d,im3d_mopx,msk3d_myo;msk3d_bld,rMap3d_bld2,score3D];
end